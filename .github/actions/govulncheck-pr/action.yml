name: 'govulncheck-pr'
description: 'Run govulncheck to scan for Go vulnerabilities and create a PR if any are found.'

inputs:
  github-token:
    description: 'GitHub token for creating PRs'
    required: false
    default: ${{ github.token }}
  base-branch:
    description: 'Base branch for PR'
    required: false
    default: 'main'

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      shell: bash

    - name: Install jq and GitHub CLI
      run: |
        if command -v apt-get &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq gh
        elif command -v brew &> /dev/null; then
          brew install jq gh
        else
          echo "Package manager not supported. Please install jq and gh manually."
          exit 1
        fi
      shell: bash

    - name: Run govulncheck
      run: |
        govulncheck -json ./... > govuln.json
        echo "Govulncheck output:"
        cat govuln.json
      shell: bash

    - name: Check for vulnerabilities
      id: vulncheck
      run: |
        # Check if the file exists and has content
        if [[ ! -f govuln.json ]] || [[ ! -s govuln.json ]]; then
          echo "vuln_count=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count vulnerabilities using the correct JSON structure
        count=$(jq -s '[.[] | select(.finding != null)] | length' govuln.json)
        
        # Ensure count is a valid number
        if [[ ! "$count" =~ ^[0-9]+$ ]]; then
          count=0
        fi
        
        echo "vuln_count=$count" >> $GITHUB_OUTPUT
        echo "Found $count vulnerabilities"
      shell: bash

    - name: Create PR if vulnerable
      if: steps.vulncheck.outputs.vuln_count != '0'
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        branch="govulncheck-fix-$(date +%Y%m%d-%H%M%S)"
        
        # Configure git with a more permissive approach
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Create govulncheck directory and save report
        mkdir -p .govulncheck
        cp govuln.json .govulncheck/latest.json
        
        # Generate a summary for the PR body
        vuln_summary=$(jq -s -r '
          [.[] | select(.finding != null)] | 
          map("- **" + .finding.osv + "**: Vulnerability in " + (.finding.trace[0].module // "unknown module")) | 
          join("\n")
        ' govuln.json)
        
        # Get current date and other details for the PR body
        current_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        scanner_version=$(jq -s -r '[.[] | select(.config != null)][0].config.scanner_version // "unknown"' govuln.json)
        db_last_modified=$(jq -s -r '[.[] | select(.config != null)][0].config.db_last_modified // "unknown"' govuln.json)
        vuln_count=$(jq -s '[.[] | select(.finding != null)] | length' govuln.json)
        
        # Create PR body with vulnerability details
        cat > pr_body.md << EOF
        ## ðŸš¨ Vulnerability Scan Report
        
        This PR was automatically created by [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) after detecting reachable vulnerabilities in the codebase.
        
        ### Vulnerabilities Found:
        
        $vuln_summary
        
        ### Next Steps:
        1. Review the vulnerability report in \`.govulncheck/latest.json\`
        2. Update the affected dependencies to secure versions
        3. Run \`govulncheck ./...\` locally to verify fixes
        4. Close this PR once vulnerabilities are resolved
        
        ### Scan Details:
        - **Scan Date**: $current_date
        - **Scanner Version**: $scanner_version
        - **Database Last Modified**: $db_last_modified
        EOF
        
        # Try to create and push branch
        git checkout -b "$branch"
        git add .govulncheck/latest.json
        git commit -m "chore: add govulncheck vulnerability report

        This commit adds the latest govulncheck scan results.
        Found $vuln_count vulnerabilities."
        
        # Use git push with the token explicitly in the URL
        repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git remote set-url origin "$repo_url"
        git push origin "$branch"
        
        # Create PR with detailed body
        gh pr create \
          --base "${{ inputs.base-branch }}" \
          --head "$branch" \
          --title "ðŸš¨ Security: govulncheck found $vuln_count reachable vulnerabilities" \
          --body-file pr_body.md \
          || echo "PR creation failed, but branch was pushed successfully"
        
        # Try to add labels (ignore failures if labels don't exist)
        gh pr edit "$branch" --add-label "security" 2>/dev/null || echo "Could not add 'security' label (label may not exist)"
        gh pr edit "$branch" --add-label "vulnerability" 2>/dev/null || echo "Could not add 'vulnerability' label (label may not exist)" 
        gh pr edit "$branch" --add-label "automated" 2>/dev/null || echo "Could not add 'automated' label (label may not exist)"
      shell: bash
