name: 'govulncheck-pr'
description: 'Run govulncheck to scan for Go vulnerabilities and create a PR if any are found.'

inputs:
  github-token:
    description: 'GitHub token for creating PRs'
    required: false
    default: ${{ github.token }}
  base-branch:
    description: 'Base branch for PR'
    required: false
    default: 'main'

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      shell: bash

    - name: Install jq and GitHub CLI
      run: |
        if command -v apt-get &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq gh
        elif command -v brew &> /dev/null; then
          brew install jq gh
        else
          echo "Package manager not supported. Please install jq and gh manually."
          exit 1
        fi
      shell: bash

    - name: Run govulncheck
      run: |
        govulncheck -json ./... > govuln.json
        echo "Govulncheck output:"
        cat govuln.json
      shell: bash

    - name: Check for vulnerabilities
      id: vulncheck
      run: |
        # Check if the file exists and has content
        if [[ ! -f govuln.json ]] || [[ ! -s govuln.json ]]; then
          echo "vuln_count=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count vulnerabilities using the correct JSON structure
        count=$(jq -s '[.[] | select(.finding != null)] | length' govuln.json)
        
        # Ensure count is a valid number
        if [[ ! "$count" =~ ^[0-9]+$ ]]; then
          count=0
        fi
        
        echo "vuln_count=$count" >> $GITHUB_OUTPUT
        echo "Found $count vulnerabilities"
      shell: bash

    - name: Create PR if vulnerable
      if: steps.vulncheck.outputs.vuln_count != '0'
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        branch="govulncheck-fix-$(date +%Y%m%d-%H%M%S)"
        
        # Configure git with a more permissive approach
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Create govulncheck directory and save report
        mkdir -p .govulncheck
        cp govuln.json .govulncheck/latest.json
        
        # Generate a summary for the PR body
        vuln_summary=$(jq -s -r '
          [.[] | select(.finding != null)] | 
          map("- **" + .finding.osv + "**: Vulnerability in " + (.finding.trace[0].module // "unknown module")) | 
          join("\n")
        ' govuln.json)
        
        # Get current date and other details for the PR body
        current_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        scanner_version=$(jq -s -r '[.[] | select(.config != null)][0].config.scanner_version // "unknown"' govuln.json)
        db_last_modified=$(jq -s -r '[.[] | select(.config != null)][0].config.db_last_modified // "unknown"' govuln.json)
        vuln_count=$(jq -s '[.[] | select(.finding != null)] | length' govuln.json)
        
        # Create PR body with vulnerability details
        cat > pr_body.md << EOF
        ## ðŸš¨ Vulnerability Scan Report
        
        This PR was automatically created by [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) after detecting reachable vulnerabilities in the codebase.
        
        ### Vulnerabilities Found:
        
        $vuln_summary
        
        ### Next Steps:
        1. Review the vulnerability report in \`.govulncheck/latest.json\`
        2. Update the affected dependencies to secure versions
        3. Run \`govulncheck ./...\` locally to verify fixes
        4. Close this PR once vulnerabilities are resolved
        
        ### Scan Details:
        - **Scan Date**: $current_date
        - **Scanner Version**: $scanner_version
        - **Database Last Modified**: $db_last_modified
        EOF
        
        # Check if there's already an open PR for govulncheck fixes
        existing_pr=$(gh pr list --state open --search "govulncheck found" --json number,title,headRefName --jq '.[0].number // empty' 2>/dev/null || echo "")
        
        if [[ -n "$existing_pr" ]]; then
          echo "Found existing open PR #$existing_pr for vulnerability fixes"
          
          # Get the existing PR's branch name
          existing_branch=$(gh pr list --state open --search "govulncheck found" --json headRefName --jq '.[0].headRefName // empty' 2>/dev/null || echo "")
          
          if [[ -n "$existing_branch" ]]; then
            echo "Using existing branch: $existing_branch"
            
            # Save the new vulnerability report temporarily
            cp govuln.json /tmp/govuln-temp.json
            
            # Remove any conflicting files before checkout
            rm -rf .govulncheck 2>/dev/null || true
            
            # Switch to existing branch and update it
            git fetch origin "$existing_branch"
            git checkout -B "$existing_branch" "origin/$existing_branch"
            
            # Restore and update the vulnerability report
            mkdir -p .govulncheck
            cp /tmp/govuln-temp.json govuln.json
            cp govuln.json .govulncheck/latest.json
            
            # Check if there are any changes to commit
            if git diff --quiet && git diff --cached --quiet; then
              echo "No changes to vulnerability report, updating PR anyway"
            else
              git add .govulncheck/latest.json
              git commit -m "chore: update govulncheck vulnerability report

              Updated vulnerability scan results.
              Found $vuln_count vulnerabilities on $current_date."
              
              # Push updates to existing branch
              repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
              git remote set-url origin "$repo_url"
              git push origin "$existing_branch"
            fi
            
            # Use existing branch name for the rest of the process
            branch="$existing_branch"
          else
            echo "Could not determine existing branch name, creating new branch"
            # Fall back to creating new branch (original logic)
            git checkout -b "$branch"
            git add .govulncheck/latest.json
            git commit -m "chore: add govulncheck vulnerability report

            This commit adds the latest govulncheck scan results.
            Found $vuln_count vulnerabilities."
            
            repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git remote set-url origin "$repo_url"
            git push origin "$branch"
          fi
          
          # Update the existing PR with new information
          cat > update_body.md << EOF
        ## ðŸš¨ Updated Vulnerability Scan Report
        
        This PR has been updated with the latest [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) scan results.
        
        **Branch**: \`$branch\`
        
        ### Vulnerabilities Found:
        
        $vuln_summary
        
        ### Next Steps:
        1. Review the latest vulnerability report in \`.govulncheck/latest.json\`
        2. Compare with previous scan results to see if new vulnerabilities were introduced
        3. Update the affected dependencies to secure versions
        4. Run \`govulncheck ./...\` locally to verify fixes
        5. Close this PR once vulnerabilities are resolved
        
        ### Latest Scan Details:
        - **Scan Date**: $current_date
        - **Scanner Version**: $scanner_version
        - **Database Last Modified**: $db_last_modified
        - **Vulnerability Count**: $vuln_count
        
        ---
        
        **Note**: This PR and branch are updated with each scan to track the current vulnerability status.
        EOF
          
          # Update existing PR
          gh pr edit "$existing_pr" \
            --title "ðŸš¨ Security: govulncheck found $vuln_count reachable vulnerabilities (Updated)" \
            --body-file update_body.md
          
          # Add a comment about the new scan
          echo "ðŸ”„ **Scan updated**: $vuln_count vulnerabilities detected on $current_date" | \
            gh pr comment "$existing_pr" --body-file -
          
          echo "Updated existing PR #$existing_pr and branch $branch with latest scan results"
          
        else
          echo "No existing PR found, creating new branch and PR..."
          
          # Create new branch and push (original logic for new PRs)
          git checkout -b "$branch"
          git add .govulncheck/latest.json
          git commit -m "chore: add govulncheck vulnerability report

          This commit adds the latest govulncheck scan results.
          Found $vuln_count vulnerabilities."
          
          repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$repo_url"
          git push origin "$branch"
          # Try to create PR, fallback to issue if PR creation is not allowed
          if gh pr create \
            --base "${{ inputs.base-branch }}" \
            --head "$branch" \
            --title "ðŸš¨ Security: govulncheck found $vuln_count reachable vulnerabilities" \
            --body-file pr_body.md 2>/dev/null; then
            echo "Pull request created successfully"
            
            # Try to add labels (ignore failures if labels don't exist)
            gh pr edit "$branch" --add-label "security" 2>/dev/null || echo "Could not add 'security' label (label may not exist)"
            gh pr edit "$branch" --add-label "vulnerability" 2>/dev/null || echo "Could not add 'vulnerability' label (label may not exist)" 
            gh pr edit "$branch" --add-label "automated" 2>/dev/null || echo "Could not add 'automated' label (label may not exist)"
          else
            echo "PR creation failed, creating an issue instead..."
            
            # Modify the body for an issue format
            cat > issue_body.md << EOF
        ## ðŸš¨ Vulnerability Scan Report
        
        This issue was automatically created by [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) after detecting reachable vulnerabilities in the codebase.
        
        **Branch with fixes**: \`$branch\`
        
        ### Vulnerabilities Found:
        
        $vuln_summary
        
        ### Next Steps:
        1. Review the vulnerability report in the branch \`$branch\` at \`.govulncheck/latest.json\`
        2. Create a pull request from branch \`$branch\` to \`${{ inputs.base-branch }}\`
        3. Update the affected dependencies to secure versions
        4. Run \`govulncheck ./...\` locally to verify fixes
        5. Close this issue once vulnerabilities are resolved
        
        ### Scan Details:
        - **Scan Date**: $current_date
        - **Scanner Version**: $scanner_version
        - **Database Last Modified**: $db_last_modified
        - **Branch**: $branch
        
        ### Create Pull Request:
        You can create a pull request manually by visiting:
        https://github.com/\${GITHUB_REPOSITORY}/pull/new/$branch
        EOF
            
            # Create an issue instead
            gh issue create \
              --title "ðŸš¨ Security: govulncheck found $vuln_count reachable vulnerabilities" \
              --body-file issue_body.md \
              --label "security,vulnerability,automated" || echo "Issue creation also failed"
          fi
        
        fi  # End of the existing PR check
      shell: bash
