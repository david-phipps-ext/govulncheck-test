name: 'govulncheck-pr'
description: 'Run govulncheck to scan for Go vulnerabilities and create a PR if any are found.'

inputs:
  github-token:
    description: 'GitHub token for creating PRs'
    required: false
    default: ${{ github.token }}
  base-branch:
    description: 'Base branch for PR'
    required: false
    default: 'main'

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      shell: bash

    - name: Install jq and GitHub CLI
      run: |
        if command -v apt-get &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq gh
        elif command -v brew &> /dev/null; then
          brew install jq gh
        else
          echo "Package manager not supported. Please install jq and gh manually."
          exit 1
        fi
      shell: bash

    - name: Run govulncheck
      run: |
        govulncheck -json ./... > govuln.json
        echo "Govulncheck output:"
        cat govuln.json
      shell: bash

    - name: Check for vulnerabilities
      id: vulncheck
      run: |
        # Check if the file exists and has content
        if [[ ! -f govuln.json ]] || [[ ! -s govuln.json ]]; then
          echo "vuln_count=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count vulnerabilities, defaulting to 0 if .vulns doesn't exist
        count=$(jq -r 'if .vulns then (.vulns | length) else 0 end' govuln.json)
        
        # Ensure count is a valid number
        if [[ ! "$count" =~ ^[0-9]+$ ]]; then
          count=0
        fi
        
        echo "vuln_count=$count" >> $GITHUB_OUTPUT
        echo "Found $count vulnerabilities"
      shell: bash

    - name: Create PR if vulnerable
      if: steps.vulncheck.outputs.vuln_count != '0'
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        branch="govulncheck-fix-$(date +%Y%m%d-%H%M%S)"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -b "$branch"
        
        # Create govulncheck directory and save report
        mkdir -p .govulncheck
        cp govuln.json .govulncheck/latest.json
        
        # Generate a summary for the PR body
        vuln_summary=$(jq -r '
          if .vulns then 
            (.vulns | map("- **" + .osv.id + "**: " + .osv.summary) | join("\n"))
          else 
            "No vulnerabilities found in latest scan."
          end
        ' govuln.json)
        
        # Create PR body with vulnerability details
        cat > pr_body.md << 'EOF'
        ## ðŸš¨ Vulnerability Scan Report
        
        This PR was automatically created by [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) after detecting reachable vulnerabilities in the codebase.
        
        ### Vulnerabilities Found:
        
        EOF
        echo "$vuln_summary" >> pr_body.md
        cat >> pr_body.md << 'EOF'
        
        ### Next Steps:
        1. Review the vulnerability report in `.govulncheck/latest.json`
        2. Update the affected dependencies to secure versions
        3. Run `govulncheck ./...` locally to verify fixes
        4. Close this PR once vulnerabilities are resolved
        
        ### Scan Details:
        EOF
        echo "- **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> pr_body.md
        echo "- **Scanner Version**: $(jq -r '.config.scanner_version // "unknown"' govuln.json)" >> pr_body.md
        echo "- **Database Last Modified**: $(jq -r '.config.db_last_modified // "unknown"' govuln.json)" >> pr_body.md
        
        git add .govulncheck/latest.json
        git commit -m "chore: add govulncheck vulnerability report

        This commit adds the latest govulncheck scan results.
        Found $(jq -r 'if .vulns then (.vulns | length) else 0 end' govuln.json) vulnerabilities."
        
        git push origin "$branch"
        
        # Create PR with detailed body
        gh pr create \
          --base "${{ inputs.base-branch }}" \
          --head "$branch" \
          --title "ðŸš¨ Security: govulncheck found $(jq -r 'if .vulns then (.vulns | length) else 0 end' govuln.json) reachable vulnerabilities" \
          --body-file pr_body.md \
          --label "security,vulnerability,automated"
      shell: bash
